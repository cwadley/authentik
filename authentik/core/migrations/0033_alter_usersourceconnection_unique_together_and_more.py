# Generated by Django 4.2.7 on 2023-11-08 14:29

import authentik.tenants.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("authentik_tenants", "0006_tenant_new_model"),
        ("authentik_core", "0032_group_roles"),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name="usersourceconnection",
            unique_together=set(),
        ),
        migrations.AddField(
            model_name="application",
            name="tenant",
            field=models.ForeignKey(
                default=authentik.tenants.models.get_default_tenant_uuid,
                on_delete=django.db.models.deletion.CASCADE,
                to="authentik_tenants.tenant",
            ),
        ),
        migrations.AddField(
            model_name="authenticatedsession",
            name="tenant",
            field=models.ForeignKey(
                default=authentik.tenants.models.get_default_tenant_uuid,
                on_delete=django.db.models.deletion.CASCADE,
                to="authentik_tenants.tenant",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="tenant",
            field=models.ForeignKey(
                default=authentik.tenants.models.get_default_tenant_uuid,
                on_delete=django.db.models.deletion.CASCADE,
                to="authentik_tenants.tenant",
            ),
        ),
        migrations.AddField(
            model_name="propertymapping",
            name="tenant",
            field=models.ForeignKey(
                default=authentik.tenants.models.get_default_tenant_uuid,
                on_delete=django.db.models.deletion.CASCADE,
                to="authentik_tenants.tenant",
            ),
        ),
        migrations.AddField(
            model_name="provider",
            name="tenant",
            field=models.ForeignKey(
                default=authentik.tenants.models.get_default_tenant_uuid,
                on_delete=django.db.models.deletion.CASCADE,
                to="authentik_tenants.tenant",
            ),
        ),
        migrations.AddField(
            model_name="source",
            name="tenant",
            field=models.ForeignKey(
                default=authentik.tenants.models.get_default_tenant_uuid,
                on_delete=django.db.models.deletion.CASCADE,
                to="authentik_tenants.tenant",
            ),
        ),
        migrations.AddField(
            model_name="token",
            name="tenant",
            field=models.ForeignKey(
                default=authentik.tenants.models.get_default_tenant_uuid,
                on_delete=django.db.models.deletion.CASCADE,
                to="authentik_tenants.tenant",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="tenant",
            field=models.ForeignKey(
                default=authentik.tenants.models.get_default_tenant_uuid,
                on_delete=django.db.models.deletion.CASCADE,
                to="authentik_tenants.tenant",
            ),
        ),
        migrations.AddField(
            model_name="usersourceconnection",
            name="tenant",
            field=models.ForeignKey(
                default=authentik.tenants.models.get_default_tenant_uuid,
                on_delete=django.db.models.deletion.CASCADE,
                to="authentik_tenants.tenant",
            ),
        ),
        migrations.AlterField(
            model_name="application",
            name="slug",
            field=models.SlugField(help_text="Internal application name, used in URLs."),
        ),
        migrations.AlterField(
            model_name="propertymapping",
            name="name",
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name="provider",
            name="name",
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name="source",
            name="slug",
            field=models.SlugField(help_text="Internal source name, used in URLs."),
        ),
        migrations.AlterField(
            model_name="token",
            name="identifier",
            field=models.SlugField(max_length=255),
        ),
        migrations.AlterField(
            model_name="user",
            name="username",
            field=models.CharField(
                help_text="Required. 150 characters or fewer. Letters, digits, and @/./+/-/_ only.",
                max_length=150,
                validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                verbose_name="username",
            ),
        ),
        migrations.AddConstraint(
            model_name="application",
            constraint=models.UniqueConstraint(
                models.F("tenant"), models.F("slug"), name="unique_core_application_tenant_slug"
            ),
        ),
        migrations.AddConstraint(
            model_name="propertymapping",
            constraint=models.UniqueConstraint(
                models.F("tenant"), models.F("name"), name="unique_core_propertymapping_tenant_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="provider",
            constraint=models.UniqueConstraint(
                models.F("tenant"), models.F("name"), name="unique_core_provider_tenant_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="source",
            constraint=models.UniqueConstraint(
                models.F("tenant"), models.F("slug"), name="unique_core_source_tenant_slug"
            ),
        ),
        migrations.AddConstraint(
            model_name="token",
            constraint=models.UniqueConstraint(
                models.F("tenant"),
                models.F("identifier"),
                name="unique_core_token_tenant_identifier",
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                models.F("tenant"),
                models.F("username"),
                name="unique_core_user_tenant_username",
                violation_error_message="A user with that username already exists.",
            ),
        ),
        migrations.AddConstraint(
            model_name="usersourceconnection",
            constraint=models.UniqueConstraint(
                models.F("tenant"),
                models.F("user"),
                models.F("source"),
                name="unique_core_usersourceconnection_tenant_user_source",
            ),
        ),
    ]
